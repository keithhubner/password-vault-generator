# GitHub Actions workflow for deploying Password Vault Generator to Civo Kubernetes
# 
# This workflow:
# 1. Builds and pushes a Docker image to GitHub Container Registry
# 2. Deploys the application to Civo Kubernetes with proper configuration
# 3. Enables Civo branding via environment variables in ConfigMap
#
# Required secrets:
# - KUBE_CONFIG: Base64 encoded kubeconfig for Civo cluster

name: Deploy PasswordVaultGenerator to Civo Kubernetes

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures we can retrieve commit history if needed

      # 2. Extract short commit SHA for versioning
      - name: Set image tag
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # 3. Set up QEMU for multi-architecture builds (if needed)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 4. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Log in to GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6. Build and push the Docker image with versioning
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/keithhubner/passwordvaultgenerator:latest
            ghcr.io/keithhubner/passwordvaultgenerator:${{ env.IMAGE_TAG }}

      # 7. Create Kubeconfig
      - name: Create Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > $HOME/.kube/config

      # 8. Deploy to Civo Kubernetes
      - name: Deploy to Civo Kubernetes
        run: |
          # Update image tag in deployment
          sed -i "s|ghcr.io/keithhubner/passwordvaultgenerator:.*|ghcr.io/keithhubner/passwordvaultgenerator:${{ env.IMAGE_TAG }}|" k8s/deployment.yaml
          
          # Show what changed
          echo "Updated deployment.yaml image tag to: ${{ env.IMAGE_TAG }}"
          grep "image:" k8s/deployment.yaml
          
          # Apply all Kubernetes manifests in order
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml
          
          # Wait for deployment to complete
          kubectl rollout restart deployment/password-vault-generator -n password-vault-generator
          kubectl rollout status deployment/password-vault-generator -n password-vault-generator
          
          # Verify deployment
          kubectl get pods -n password-vault-generator
          kubectl get configmap nextjs-config -n password-vault-generator
          
          # Verify Civo branding is enabled
          echo "Checking Civo branding configuration..."
          HOSTED_ON=$(kubectl get configmap nextjs-config -n password-vault-generator -o jsonpath='{.data.NEXT_PUBLIC_HOSTED_ON}')
          echo "NEXT_PUBLIC_HOSTED_ON is set to: '$HOSTED_ON'"
          
          if [ "$HOSTED_ON" = "civo" ]; then
            echo "✅ Civo branding is properly configured and will be displayed"
          else
            echo "⚠️  Civo branding is not configured (value: '$HOSTED_ON')"
          fi
